x-net-config:
  &net-config
  network_mode: host
  ipc: host
  env_file: net.env

services:

  rosbot:
    image: husarion/rosbot:humble
    <<: *net-config
    command: ros2 launch rosbot_bringup bringup.launch.py

  microros:
    image: husarion/micro-ros-agent:humble
    <<: *net-config
    devices:
      - ${SERIAL_PORT:?err}
    command: ros2 run micro_ros_agent micro_ros_agent serial -D $SERIAL_PORT serial -b 576000 # -v6

  rplidar:
    image: husarion/rplidar:humble
    <<: *net-config
    devices:
      - ${LIDAR_SERIAL:?err}:/dev/ttyUSB0
    volumes:
      - ./healthcheck:/healthcheck
    command: ros2 launch sllidar_ros2 sllidar_launch.py serial_baudrate:=${LIDAR_BAUDRATE:-115200}
    healthcheck:
      test: bash -c "source /opt/ros/$ROS_DISTRO/setup.bash && /healthcheck/healthcheck_lidar.py"
      interval: 10s
      timeout: 10s
      retries: 6
      start_period: 0s

  slam:
    image: husarion/navigation2:humble
    <<: *net-config
    depends_on:
      rplidar: { condition: service_healthy }
    volumes:
      - ./config/${SLAM_MODE:-slam}_params.yaml:/params.yaml
      - ./maps:/maps
      - ./healthcheck:/healthcheck
    command: >
      ros2 launch nav2_bringup ${SLAM_MODE:-slam}_launch.py
        params_file:=/params.yaml
        use_sim_time:=False
        map:=/maps/map.yaml
    healthcheck:
      test: bash -c "source /opt/ros/$ROS_DISTRO/setup.bash && /healthcheck/healthcheck_${SLAM_MODE:-slam}.py"
      interval: 10s
      timeout: 10s
      retries: 6
      start_period: 0s
  # navigation:
  #   image: husarion/navigation2:humble
  #   <<: *net-config
  #   depends_on:
  #     slam: { condition: service_healthy }
  #   volumes:
  #     - ./config/nav2_params.yaml:/nav2_params.yaml
  #   command: >
  #     ros2 launch nav2_bringup navigation_launch.py
  #       params_file:=/nav2_params.yaml
  #       use_sim_time:=False
